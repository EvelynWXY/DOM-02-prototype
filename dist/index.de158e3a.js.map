{"mappings":"AAAA,EAAiC,AAAjC,2EAA6E;AACjC,EAAM,AAAlD,sEAAwE;AAClD,EAA6B,AAAnD,6EAA+E;AACnD,EAAvB,AAAL,GAAK;AACL,EAAkB,AAAlB,gBAAkB;AAClB,EAAmC,AAAnC,qCAAuC;AACnC,EAAgC,AAApC,sCAAwC;AACpC,EAAyC,AAA7C,uEAAyE;AAE7C,EAAI,AAAhC,0CAA4C;AAChC,EAAY,AAAxB,sBAAwB;AAExB,EAAiE,AAAjE,yEAA2E;AACjE,EAAS,AAAnB,iBAAmB;AAEnB,EAA0C,AAA1C,4CAA8C;AAC1C,EAAiC,AAArC,6CAA+C;AAErC,EAAqE,AAA/E,2FAA6F;AAE/E,EAA8B,AAA5C,gDAAkD;AAE5C,EAAsB,AAA5B,8BAAgC;AAC5B,EAA8B,AAAlC,0CAA4C;AAClC,EAAW,AAArB,mBAAqB;AACrB,EAAsB,AAAtB,oBAAsB;AACtB,EAAuB,AAAvB,qBAAuB;AACvB,EAAW,AAAX,SAAW;AACX,EAAyB,AAAzB,uBAAyB;AAEzB,EAA+B,AAA/B,qEAAuE;AAC/B,EAAT,AAA/B,qCAAuC;AAC/B,EAAwB,AAAhC,8BAAgC;AAChC,EAAkF,AAAlF,gFAAkF;AAClF,EAAgE,AAAhE,wEAA0E;AAEhE,EAAkC,AAA5C,0CAA4C;AAC5C,EAA0B,AAA1B,wCAA0C;AAC1B,EAAwC,AAAxD,4FAA8F;AACxD,EAAD,AAArC,mCAAqC;AAErC,EAAe,AAAf,+BAAiC;AACf,EAAW,AAA7B,2BAA6B;AAC7B,EAAsB,AAAtB,oBAAsB;AAEtB,EAA6B,AAA7B,2BAA6B;AAC7B,EAAwB,AAAxB,sBAAwB;AAExB,EAA8B,AAA9B,8DAAgE;AAC9B,EAAsC,AAAxE,wFAA0F;AACxE,EAAyB,AAA3C,yEAA2E;AAC3C,EAAsC,AAAtE,sGAAwG;AAEtE,EAAD,AAAjC,iDAAmD;AAEjC,EAAgC,AAAlD,4DAA8D;AAClD,EAA8B,AAA1C,sDAAwD;AAC1C,EAAE,AAAhB,cAAgB;AAEhB,EAAS,AAAT,eAAS;AACT,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,CAAmB;AAClC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI","sources":["src/main.js"],"sourcesContent":["//jQuery提供一个函数，这个函数接收一个选择器，CSS选择器\n//const api = jQuery(\".test\"); // 不返回元素们，返回 api 对象\n//api.addClass(\"red\") 的返回值是api,继续调用.addClass()为链式操作\n//api\n// jQuery(\".test\")\n//   .addClass(\"red\") //this 就是 api\n//   .addClass(\"blue\") //this 就是 api\n//   .addClass(\"green\"); //遍历所有刚才获取的元素，添加.red\n\n// obj.fn(p1); //函数里的 this 就是obj\n// obj.fn.call(obj, fn);\n\n// const x1 = jQuery(\".test\").find(\".child\"); //查找 test 里面的 child\n// console.log(x1);\n\n// const api1 = jQuery(\".test\"); //获取 test\n// api1.addClass(\"blue\"); //在上面加了blue\n\n// const api2 = api1.find(\".child\").addClass(\"red\"); //获取到 test 的 child 并加上 red\n\n// api1.addClass(\"green\"); //在 api1 上加 green\n\n// jQuery(\".test\") //操作 api1\n//   .find(\".child\") //对 api2 进行操作\n//   .addClass(\"red\")\n//   .addClass(\"blue\")\n//   .addClass(\"green\")\n//   .end()\n//   .addClass(\"yellow\");\n\n//上述代码改写为以下，可以更好的理解jquery.js中的：\n//array.oldApi = this;以及end()函数\n// const api1 = jQuery(\".test\");\n// const api2 = find(\".child\").addClass(\"red\").addClass(\"blue\").addClass(\"green\");\n// const oldApi = api2.end().addClass(\"yellow\"); //使用新api调用end()\n\n// const x = jQuery(\".test\").find(\".child\");\n// //x 是可以操作所有 child 的 api\n// //(div) => console.log(div) 函数传进去的时候没有被调用，在each()里被调用\n// x.each((div) => console.log(div));\n\n//找到并打印出test的爸爸\n// const x = jQuery(\".test\");\n// x.parent().print();\n\n// const x = jQuery(\".test\");\n// x.children().print();\n\n//若是普通的 div 就用el开头或者直接命名 DOM对象\n// const elDiv1 = document.querySelector(\".test\"); //找到第一个类名为 test 的 div\n// //若是jQuery产生的一个 api 对象，要使用 jQuery 的 $ 开头\n// const $div2 = $(\".test\"); //div2获取的是操作 test 对应的 div 的一个 api，不是div本身\n\n// //div2 到底是 DOM 对象 还是 jQuery 对象\n\n// //DOM 对象只能使用 DOM API querySelector  appendChild\n// //jQuery 对象只能使用 jQuery 的 API  find each\n// $div2.each();\n\n//增加一个div\nconst $div = $(\"<div>123456</div>\");\n$div.appendTo(document.body);\n"],"names":[],"version":3,"file":"index.de158e3a.js.map","sourceRoot":"/__parcel_source_root/"}