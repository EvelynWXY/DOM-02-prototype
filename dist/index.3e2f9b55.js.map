{"mappings":"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","sources":["src/jquery.js"],"sourcesContent":["window.$ = window.jQuery = function (selectorOrArrayOrTemplate) {\n  let elements;\n  if (typeof selectorOrArrayOrTemplate === \"string\") {\n    if (selectorOrArrayOrTemplate[0] === \"<\") {\n      //创建div\n      elements = [createElement(selectorOrArrayOrTemplate)];\n    } else {\n      //查找div\n      //jQuery接收一个选择器，根据选择器得到一些元素，返回一个对象，对象有方法可以操作这些元素\n      elements = document.querySelectorAll(selectorOrArrayOrTemplate);\n    }\n  } else if (selectorOrArrayOrTemplate instanceof Array) {\n    elements = selectorOrArrayOrTemplate;\n  }\n  function createElement(string) {\n    const container = document.createElement(\"template\");\n    container.innerHTML = string.trim();\n    return container.content.firstChild;\n  }\n  //闭包：函数访问外部的变量\n  //api可以操作elements\n  //   const api={}\n  //返回一个对象去操作 elements\n  return {\n    jquery: true,\n    elements: elements,\n    get(index) {\n      return elements[index];\n    },\n    //插入到某个节点\n    appendTo(node) {\n      if (node instanceof Element) {\n        this.each((el) => node.appendChild(el)); // 遍历 elements，对每个 el 进行 node.appendChild 操作\n      } else if (node.jquery === true) {\n        this.each((el) => node.get(0).appendChild(el)); // 遍历 elements，对每个 el 进行 node.get(0).appendChild(el))  操作\n      }\n    },\n    append(children) {\n      if (children instanceof Element) {\n        this.get(0).appendChild(children);\n      } else if (children instanceof HTMLCollection) {\n        for (let i = 0; i < children.length; i++) {\n          this.get(0).appendChild(children[i]);\n        }\n      } else if (children.jquery === true) {\n        children.each((node) => this.get(0).appendChild(node));\n      }\n    },\n    //elements是一个数组，在每一个element上添加一个class，给className遍历elements\n    //api为一个对象，其中key为addClass，value为(){}是一个function\n    addClass(className) {\n      for (let i = 0; i < elements.length; i++) {\n        elements[i].classList.add(className); //每个element添加一个className\n      }\n      return this; //此处的this就是api,之所以使用this是因为在这个函数中可以没有api这个变量，而是直接使用return\n    },\n    //遍历并对每个元素执行fn,each接收一个函数在某个时候会调用这个函数，调用的时候会传elements[i]和i\n    each(fn) {\n      for (let i = 0; i < elements.length; i++) {\n        fn.call(null, elements[i], i);\n      }\n      return this; //this就是 api 对象\n    },\n    //获取每个元素的爸爸\n    parent() {\n      const array = [];\n      this.each((node) => {\n        if (array.indexOf(node.parentNode) === -1) {\n          array.push(node.parentNode);\n        }\n      });\n      return jQuery(array);\n    },\n    //获取儿子\n    children() {\n      const array = [];\n      this.each((node) => {\n        array.push(...node.children); //... 为展开操作符号\n        //等价于array.push(node.children[0],node.children[1],node.children[2]...)\n      });\n      return jQuery(array);\n    },\n    //打印出每个元素\n    print() {\n      console.log(elements);\n    },\n\n    //查找XXX里面的xx元素\n    find(selector) {\n      let array = []; //声明临时数组储存我们新查找的元素\n      for (let i = 0; i < elements.length; i++) {\n        //用之前的空数组连接上新的元素，然后把新的元素得到的新数组再放回array，即array = array + elements2\n        const elements2 = Array.from(elements[i].querySelectorAll(selector));\n        array = array.concat(elements2);\n      }\n      array.oldApi = this; //this 就是 api\n      //jQuery 传什么，就会返回一个对象操作什么\n      return jQuery(array); //给 array 返回 newApi\n    },\n    end() {\n      return this.oldApi; //this 就是当前的 api //api2\n    },\n  };\n  //return api; //不return elements，return可以操作elements的api\n};\n"],"names":[],"version":3,"file":"index.3e2f9b55.js.map","sourceRoot":"/__parcel_source_root/"}