{"mappings":"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","sources":["src/jquery.js"],"sourcesContent":["window.$ = window.jQuery = function (selectorOrArrayOrTemplate) {\n  let elements;\n  if (typeof selectorOrArrayOrTemplate === \"string\") {\n    if (selectorOrArrayOrTemplate[0] === \"<\") {\n      //创建div\n      elements = [createElement(selectorOrArrayOrTemplate)];\n    } else {\n      //查找div\n      //jQuery接收一个选择器，根据选择器得到一些元素，返回一个对象，对象有方法可以操作这些元素\n      elements = document.querySelectorAll(selectorOrArrayOrTemplate);\n    }\n  } else if (selectorOrArrayOrTemplate instanceof Array) {\n    elements = selectorOrArrayOrTemplate;\n  }\n  function createElement(string) {\n    const container = document.createElement(\"template\");\n    container.innerHTML = string.trim();\n    return container.content.firstChild;\n  }\n\n  //api可以操作elements\n  const api = Object.create(jQuery.prototype); //创建一个对象，这个对象的__proto__为括号里的jQuery.prototype\n  //const api = {__proto__:jQuery.prototype}\n  //assign 把后者的属性复制给前者即api，浅复制\n  Object.assign(api, {\n    elements: elements, //把 elements 的elements 复制给 api的 elements\n    oldApi: selectorOrArrayOrTemplate.oldApi, //将 oldApi 的 selectorOrArrayOrTemplate.oldApi 复制给 api 的 selectorOrArrayOrTemplate.oldApi\n  });\n  //   const api={}\n  //返回一个对象去操作 elements\n  return api;\n};\n\n//return api; //不return elements，return可以操作elements的api\n\njQuery.fn = jQuery.prototype = {\n  constructor: jQuery,\n  jquery: true,\n  get(index) {\n    return this.elements[index];\n  },\n  //插入到某个节点\n  appendTo(node) {\n    if (node instanceof Element) {\n      this.each((el) => node.appendChild(el)); // 遍历 elements，对每个 el 进行 node.appendChild 操作\n    } else if (node.jquery === true) {\n      this.each((el) => node.get(0).appendChild(el)); // 遍历 elements，对每个 el 进行 node.get(0).appendChild(el))  操作\n    }\n  },\n  append(children) {\n    if (children instanceof Element) {\n      this.get(0).appendChild(children);\n    } else if (children instanceof HTMLCollection) {\n      for (let i = 0; i < children.length; i++) {\n        this.get(0).appendChild(children[i]);\n      }\n    } else if (children.jquery === true) {\n      children.each((node) => this.get(0).appendChild(node));\n    }\n  },\n  //elements是一个数组，在每一个element上添加一个class，给className遍历elements\n  //api为一个对象，其中key为addClass，value为(){}是一个function\n  addClass(className) {\n    for (let i = 0; i < this.elements.length; i++) {\n      this.elements[i].classList.add(className); //每个element添加一个className\n    }\n    return this; //此处的this就是api,之所以使用this是因为在这个函数中可以没有api这个变量，而是直接使用return\n  },\n  //遍历并对每个元素执行fn,each接收一个函数在某个时候会调用这个函数，调用的时候会传elements[i]和i\n  each(fn) {\n    for (let i = 0; i < this.elements.length; i++) {\n      fn.call(null, this.elements[i], i);\n    }\n    return this; //this就是 api 对象\n  },\n  //获取每个元素的爸爸\n  parent() {\n    const array = [];\n    this.each((node) => {\n      if (array.indexOf(node.parentNode) === -1) {\n        array.push(node.parentNode);\n      }\n    });\n    return jQuery(array);\n  },\n  //获取儿子\n  children() {\n    const array = [];\n    this.each((node) => {\n      array.push(...node.children); //... 为展开操作符号\n      //等价于array.push(node.children[0],node.children[1],node.children[2]...)\n    });\n    return jQuery(array);\n  },\n  //打印出每个元素\n  print() {\n    console.log(this.elements);\n  },\n\n  //查找XXX里面的xx元素\n  find(selector) {\n    let array = []; //声明临时数组储存我们新查找的元素\n    for (let i = 0; i < this.elements.length; i++) {\n      //用之前的空数组连接上新的元素，然后把新的元素得到的新数组再放回array，即array = array + elements2\n      const elements2 = Array.from(this.elements[i].querySelectorAll(selector));\n      array = array.concat(elements2);\n    }\n    array.oldApi = this; //this 就是 api\n    //jQuery 传什么，就会返回一个对象操作什么\n    return jQuery(array); //给 array 返回 newApi\n  },\n  end() {\n    return this.oldApi; //this 就是当前的 api //api2\n  },\n};\n"],"names":[],"version":3,"file":"index.3e2f9b55.js.map","sourceRoot":"/__parcel_source_root/"}